(()=>{var __webpack_modules__={705:module=>{module.exports=eval("require")("@actions/core")},628:module=>{module.exports=eval("require")("@actions/github")},466:module=>{module.exports=eval("require")("@actions/github/lib/utils")},640:module=>{module.exports=eval("require")("@octokit/plugin-retry")},417:module=>{module.exports=eval("require")("@octokit/plugin-throttling")},197:module=>{module.exports=eval("require")("array-sort")},380:module=>{module.exports=eval("require")("csv-stringify/lib/sync")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var r=__webpack_module_cache__[e];if(r!==undefined){return r.exports}var t=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](t,t.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return t.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(705);const r=__nccwpck_require__(628);const t=__nccwpck_require__(380);const o=__nccwpck_require__(197);const{GitHub:n}=__nccwpck_require__(466);const{retry:s}=__nccwpck_require__(640);const{throttling:i}=__nccwpck_require__(417);const a=n.plugin(i,s);const u=require(process.env.GITHUB_EVENT_PATH);const c=e.getInput("token",{required:true});const _=e.getInput("org",{required:false})||u.organization.login;const l=e.getInput("adminTeamName",{required:true});let p;const m=new a({auth:c,request:{retries:3,retryAfter:180},throttle:{onRateLimit:(e,r,t)=>{t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`);if(r.request.retryCount===0){t.log.info(`Retrying after ${e} seconds!`);return true}},onAbuseLimit:(e,r,t)=>{t.log.warn(`Abuse detected for request ${r.method} ${r.url}`)}}});(async()=>{try{let e=null;let r=[];const t=`\nquery ($owner: String!, $cursorID: String) {\n  organization(login: $owner) {\n    repositories(first: 100, after: $cursorID) {\n           nodes {\n             collaborators {\n               edges {\n                  permissionSources {\n              source {\n                ... on Team {\n                  id\n                  name\n                }\n              }\n              permission\n            }\n          }\n        }\n        name\n      }\n    }\n  }\n}\n    `;let o=false;let n=null;do{n=await m.graphql({query:t,owner:_,cursorID:e});const s=n.organization.repositories.nodes;o=n.organization.repositories.pageInfo.hasNextPage;if(o){e=n.organization.repositories.pageInfo.endCursor}else{e=null}r=r.concat(s)}while(o);await repoDirector(r)}catch(r){e.setFailed(r.message)}})();async function repoDirector(r){try{let e=[];const t=r.filter((e=>e));t.forEach((r=>{console.log(r);const t=r.name;const o=r.collaborators.edges.filter((e=>e.permissionSources[0].permission==="ADMIN"&&e.permissionSources[0].source.name===l));e.push({repoName:t,teamAdmin:o})}));sortTotals(e)}catch(r){e.setFailed(r.message)}}async function sortTotals(n){try{const s={repoName:"Repository",teamAdmin:`Has Admin Team`};const i=e.getInput("sort",{required:false})||"additions";const a=o(n,i,{reverse:true});a.unshift(s);const u=t(a,{});const c=`reports/${_}-${(new Date).toISOString().substring(0,19)+"Z"}-${p}.csv`;const l=e.getInput("committer-name",{required:false})||"github-actions";const d=e.getInput("committer-email",{required:false})||"github-actions@github.com";const{owner:g,repo:f}=r.context.repo;const b={owner:g,repo:f,path:c,message:`${(new Date).toISOString().slice(0,10)} Git audit-log report`,content:Buffer.from(u).toString("base64"),committer:{name:l,email:d}};console.log(b);console.log(`Pushing final CSV report to repository path: ${c}`);await m.rest.repos.createOrUpdateFileContents(b)}catch(r){e.setFailed(r.message)}}})();module.exports=__webpack_exports__})();